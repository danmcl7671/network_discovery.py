#Created by Daniel McLaughlin
#The plan for this was to scan everything on my network and also give me the OS and hostname 
#But due to security it would just shown none  

import sys
import os
import socket
import subprocess
import platform
import netifaces
from getmac import get_mac_address as gma
from concurrent.futures import ThreadPoolExecutor
from scapy.layers.inet import IP, ICMP
from scapy.sendrecv import sr1
import requests

def get_ttl(ip):
    pkt = IP(dst=ip)/ICMP()
    resp = sr1(pkt, timeout=1, verbose=False)
    if resp:
        return resp.ttl
    return None

def determine_os(ttl):
    if ttl is None:
        return "Unknown"
    if ttl >= 64 and ttl < 65:
        return "Linux/Unix"
    elif ttl >= 128 and ttl < 129:
        return "Windows"
    elif ttl >= 255:
        return "Cisco/Networking Device"
    return "Unknown"

def ping(ip):
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-W', '1', ip]
    return subprocess.call(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

def get_ip_range_from_interface():
    interfaces = netifaces.interfaces()
    for interface in interfaces:
        ifaddresses = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in ifaddresses:
            iface_data = ifaddresses[netifaces.AF_INET][0]
            ip = iface_data['addr']
            netmask = iface_data['netmask']
            # Skip localhost and self-assigned IP addresses
            if not ip.startswith("127.") and not ip.startswith("169.254."):
                return ip, netmask
    return None, None

def ip_to_network(ip, netmask):
    ip_bin = ''.join([bin(int(x)+256)[3:] for x in ip.split('.')])
    netmask_bin = ''.join([bin(int(x)+256)[3:] for x in netmask.split('.')])
    network_bin = ''.join([ip_bin[i] if netmask_bin[i] == '1' else '0' for i in range(32)])
    network_ip = '.'.join([str(int(network_bin[i*8:i*8+8], 2)) for i in range(4)])
    return network_ip

def generate_ip_range(network_ip, netmask):
    ip_list = []
    ip_parts = network_ip.split('.')
    for i in range(1, 255):
        ip_parts[-1] = str(i)
        ip_list.append('.'.join(ip_parts))
    return ip_list

def get_netbios_name(ip):
    try:
        result = subprocess.run(['nmblookup', '-A', ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(f"nmblookup output for {ip}:\n{result.stdout}")
        for line in result.stdout.splitlines():
            if "<20>" in line:  # This indicates a unique NetBIOS name
                parts = line.split()
                return parts[0]
    except Exception as e:
        print(f"Error running nmblookup for {ip}: {e}")
    return None

def get_http_hostname(ip):
    try:
        response = requests.get(f'http://{ip}', timeout=1)
        if response.status_code == 200:
            return response.headers.get('Server', None)
    except Exception as e:
        print(f"Error making HTTP request to {ip}: {e}")
    return None

def get_hostname(ip):
    hostname = None
    try:
        hostname = socket.gethostbyaddr(ip)[0]
    except (socket.herror, socket.gaierror) as e:
        print(f"DNS resolution failed for {ip}: {e}")

    if not hostname:
        hostname = get_netbios_name(ip)
        if hostname:
            print(f"Resolved NetBIOS name for {ip}: {hostname}")

    if not hostname:
        hostname = get_http_hostname(ip)
        if hostname:
            print(f"HTTP server header for {ip}: {hostname}")

    if not hostname:
        print(f"Failed to resolve hostname for {ip}")

    return hostname

def get_device_info(ip):
    if ping(ip):
        hostname = get_hostname(ip)
        mac = gma(ip=ip)
        ttl = get_ttl(ip)
        os_type = determine_os(ttl)
        return {"ip": ip, "mac": mac, "hostname": hostname, "os": os_type}
    return None

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 network_discovery.py <IP or IP range>")
        return

    target = sys.argv[1]
    if '/' in target:
        network_ip, netmask = target.split('/')
        ip_range = generate_ip_range(network_ip, netmask)
    else:
        ip_range = [target]

    print(f"Scanning target: {target}")
    devices = []

    with ThreadPoolExecutor(max_workers=50) as executor:
        results = list(executor.map(get_device_info, ip_range))

    devices = [device for device in results if device is not None]

    if devices:
        print(f"Discovered {len(devices)} devices:")
        for device in devices:
            print(f"IP: {device['ip']}, MAC: {device['mac']}, Hostname: {device['hostname']}, OS: {device['os']}")
    else:
        print("No devices discovered.")

if __name__ == "__main__":
    main()
